[[{"l":"Introduction to Sam Accelerate"},{"i":"rapidly-build-test-and-deploy-serverless-applications","l":"Rapidly build, test and deploy serverless applications"},{"l":"Prerequisites for the workshop","p":["AWS CLI allows you to interact with AWS services from a terminal session. Make sure you have the latest version of the AWS CLI installed on your system.","AWS USER ACCOUNT CREATION","IDE FOR PROGRAMMING","PYTHON"]}],[{"l":"Aws account and user","p":["To deploy your app, you’ll need access to an AWS account. If you already have an account and your system is configured with credentials of an administrator user, you can move to the next step."]},{"l":"Administrative user","p":["Sign in to your AWS account","Go to the AWS IAM console and create a new user.","Type a name for your user (e.g. sam-workshop-user) and choose “Programmatic access”.","In the next screen, you’ll see your Access key ID and you will have the option to click Show to show the Secret access key. Keep this browser window open."]},{"l":"Configure your credentials","p":["Open a terminal window and use aws configure to set up your environment. Type the access key ID and secret key and choose a default region (you can use us-east-1, eu-west-1, us-west-2 for example). Preferably use a region that doesn’t have any resources already deployed into it.","And fill in the information from the console:"]}],[{"l":"Aws cli","p":["The AWS CLI allows you to interact with AWS services from a terminal session. Make sure you have the latest version of the AWS CLI installed on your system.","Windows: MSI installer","Linux, macOS or Unix: Bundled installer","See the AWS Command Line Interface installation page for more details."]}],[{"l":"Integrated development environment","p":["We highly recommend to use an IDE that supports code-completion and syntax highlighting for your language of choice","VS Code(recommende)","CLion","GoLand","IntelliJ","WebStorm","Rider","PhpStorm","PyCharm","RubyMine","DataGrip","Visual Studio"]}],[{"l":"Python","p":["If you are planning on using the Python Workshop, you obviously will need to have Python installed. Specifically, you will need version 3.8 or later. You can find information about downloading and installing Python here.","If you use Windows, be sure Python is on your PATH. To see if it is, type python at a command prompt. The easiest way to make sure Python is on your PATH is to tick the Add Python 3.x to PATH checkbox on the first screen of the Python installer wizard. If you already have Python installed, but it’s not on your PATH, you can add it by editing the PATH environment variable. To edit environment variables, click the Environment Variables button in the Advanced page of Windows’ System Properties. (The Quickest way to get there: press and release the Windows key, type env, and choose Edit the system environment variables from the Start menu.)","Additionally, you will need to have the Python package installer (pip) installed. See installation instructions here."]}],[{"l":"Aggregated feedback","p":["The final part of AWS SAM Accelerate’s beta feature set is aggregating logs for developer feedback. This feature is an enhancement to the already existing sam logs command. In addition to pulling Amazon CloudWatch Logs or the Lambda function, it is now possible to retrieve logs for API Gateway and traces from AWS X-Ray.","The sam logs command returns logs for","AWS Lambda function","Amazon API Gateway REST execution logs","AWS X-Ray traces","Set logs and tracer, in-order to see logs in lambda. Use the aws-lambda-powertools library to log easily"]}],[{"l":"Introduction"},{"l":"AWS SAM ACCELERATE","p":["AWS SAM(Serverless Application Model) is an open source IaC(Infrastructure As Code) framework created by the AWS Team to help developers build and test Serverless Applications.","It provides a shorthand syntax to express functions, APIs, Databases and Event source mappings.","When building serverless apps with SAM, we use the SAM CLI to locally build, test and debug applications defined by SAM templates.","The 2 major commands used to carry out these tasks are sam build and sam deploy --guided.","So after making changes to your application, you have to build and deploy the application to the cloud using the above commands.","Due to the high latency of deploying after each change is made, developers started looking for other options. Luckily, the SAM Team listened and built SAM ACCELERATE."]},{"l":"WHAT IS SAM ACCELERATE","p":["AWS SAM Accelerate aims to increase infrastructure accuracy for testing with sam sync, incremental builds, and aggregated feedback for developers.","It comes with a set of features that aim at reducing deployment latency, and enabling developers to test their code quickly against production AWS services in the cloud.","Let's Get Started."]}],[{"l":"New project","p":["After installing the prerequisites,","Open up a terminal/command prompt and run the command sam init","Choose the quick start template and then the hello world example","Select python as your runtime language.","Give your project a name and that's it.","Now we've created a SAM project, let's see SAM Accelerate in Action."]}],[{"l":"Sam build and deploy","p":["Now that we've created a SAM project, let's go ahead and deploy the app to the cloud. Firstly, we'll go ahead and deploy our app the old fashion way. That is, using the commands.","sam build","sam deploy --guided","For Every single update we make to the app, be it configuration or code or both, we need to run the above commands to deploy our application to the cloud. It's time-consuming and definitely affect developer productivity.","With this in mind, let's look at the first feature of SAM ACCELERATE called sam sync"]}],[{"l":"Sam sync","p":["The command sam sync synchronizes your project declared in an AWS SAM template to the AWS Cloud. sam sync breaks down the project into 2 parts.","Code","Configuration"]},{"l":"Code","p":["sam sync considers the following as Code","lambda function Code","lambda layer code","Step functions amazon states language","Api gateway Open API"]},{"l":"Configuration","p":["Everything else"]},{"i":"using-sam-sync-no-options","l":"Using sam sync (no options)","p":["The sam sync command with no options deploys or updates all infrastructure and code like the sam deploy command. So underneath, sam sync runs sam build, then synchronizes your application to the cloud.","Let's see it in Action. Go to your application and run the above code from the terminal."]}],[{"l":"Sam sync code","p":["sam sync --stack-name --code","Most times, we don't want to synchronize our entire app to the cloud when we do a code update. We only want to push that part we updated. The --code option of sam sync comes in.","Let's see it in action.","Let's make an update to our lambda function and use the sam sync with --code command to sync our app to the cloud.","to","Now, run the command sam sync --stack-name {stack-name} --code and watch the app deploy under 10 seconds My stack name here is sam-workshop-basic","The sam sync command verifies each of the code types present and synchronizes the sources to the cloud. This example uses an API Gateway REST API and two Lambda functions. AWS SAM skips the REST API because there is no external OpenAPI file for this project. However, the Lambda functions and their dependencies are synchronized."]}],[{"l":"Sam sync resource","p":["sam sync --stack-name blog --code --resource AWS::Serverless::Function","You can further limit the synchronized resources by using the --resource flag with the --code flag:","This command limits the synchronization to Lambda functions","Other available resources are AWS::Serverless::Api, AWS::Serverless::HttpApi, and AWS::Serverless::StateMachine."]}],[{"l":"Sam sync resource-id","p":["You can target one specific resource with the --resource-id flag to get more granular:","This time sam sync ignores the HelloGhanaFunction and only updates the HelloWorldFunction declared with the command’s--resource-id flag. Or"]}],[{"l":"Sam sync watch","p":["sam sync --stack-name sam-workshop-basic --watch","The sam sync --watch option tells AWS SAM to monitor for file changes and automatically synchronize when changes are detected. If the changes include configuration changes, AWS SAM performs a standard synchronization equivalent to the sam sync command. If the changes are code only, then AWS SAM synchronizes the code with the equivalent of the sam sync --code command.","The first time you run the sam sync command with the --watch flag, AWS SAM ensures that the latest code and infrastructure are in the cloud. It then monitors for file changes until you quit the command:","Run the sam sync --stack-name sam-workshop-basic --watch command, watch the application build and sync with the cloud.","Then make a change in any lambda handler, hit save and watch the code autosync."]}],[{"l":"Reference","p":["https://phatrabbitapps.com/","[Accelerating serverless development with AWS SAM Accelerate] ( https://aws.amazon.com/blogs/compute/accelerating-serverless-development-with-aws-sam-accelerate/)","Deploying applications"]}]]